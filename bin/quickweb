#!/usr/bin/env node

/**
 * QuickWeb cli
 *
 * @author leizongmin<leizongmin@gmail.com>
 * @version 0.2.0
 */
 
// QuickWeb模块路径
var module_quickweb = 'quickweb'; 

var fs = require('fs'); 
var path = require('path');
//-----------------------------------------------------------------------------------
var cmd = '' + process.argv[2];
cmd = cmd.trim().toLowerCase();

// 创建基本目录
if (cmd == '-init' || cmd == '--init') {
	var dir = ['html', 'tpl', 'tmp', 'code', 'error_page', 'config', 'init', 'lib'];
	// 创建目录
	for (var i in dir) {
		try {
			fs.mkdirSync(dir[i], 666);
		} catch (err) {
			console.error(err.toString());
		}
	}
	// 创建样例
	if (!path.existsSync('./config/config.json'))
		fs.writeFileSync('./config/config.json', '{\n\t"log level":\t4\n}');
	if (!path.existsSync('./code/index.js'))
		fs.writeFileSync('./code/index.js', 'exports.path = \'/\';\nexports.get = function (request, response, next) {\n\tresponse.end(\'Hello, world!\');\n}');
	if (!path.existsSync('./init/start.js'))
		fs.writeFileSync('./init/start.js', 'console.log(\'Write your global init code here.\');');
	// 创建package.json文件
	if (!path.existsSync('./package.json'))
		fs.writeFileSync('./package.json', '{\n\t"name":\t"quickweb app",\n\t"main":\t"server.js",\n\t"dependencies": {\n\t\t"quickweb":\t"*"\n\t}\n}');
	// 创建server.js
	var servercode = fs.readFileSync(__filename);
	fs.writeFileSync('./server.js', servercode);
	
	console.log('OK!');
	process.exit();
}
// 帮助
if (cmd == '-h' || cmd == '--h' || cmd == '-help' || cmd == '--help' || cmd == '?' || cmd == '/?' || cmd == '-?' || cmd == '--?') {
	console.log('[QuickWeb Usage]\n');
	console.log('  quickweb -init         create directory structure');
	console.log('  quickweb -help         get help');
	console.log('  quickweb [directory]   run QuickWeb application in the specified directory');
	console.log('  quickweb               run QuickWeb application in the current directory');
	console.log('\ncluster support:');
	console.log('  quickweb -cluster [directory]   run multi QuickWeb application instance');
	console.log('  quickweb -cluster               run multi QuickWeb application instance');
	console.log('');
	console.log('For more information, please visit http://github.com/leizongmin/QuickWeb');
	process.exit();
}

//-----------------------------------------------------------------------------------
var startQuickWeb = function () {
	// 改变工作目录
	if (typeof wd == 'string')
		process.chdir(wd);

	// 载入QuickWeb 
	var web = require(module_quickweb);
	web.init();
	web.init.load();

	// 自动监听端口
	if (web.get('auto listen')) {
		var listenHttp = web.get('listen http');
		var listenHttps = web.get('listen https');
		if (typeof web.server == 'undefined')
			web.server = {}
		if (typeof web.server.http == 'undefined')
			web.server.http = {}
		if (typeof web.server.https == 'undefined')
			web.server.https = {}
			
		// 自动监听HTTP端口，如果没指定，则默认开启80端口
		if (typeof listenHttp == 'undefined') {
			web.server.http.default = web.createHttp();
		}
		else {
			for (var i in listenHttp) {
				var h = listenHttp[i];
				web.server.http[h.name] = web.createHttp(h.port, h.ip);
			}
		}
		
		// 自动监听HTTPS端口
		if (typeof listenHttps != 'undefined') {
			for (var i in listenHttps) {
				var h = listenHttps[i];
				web.server.https[h.name] = web.createHttps({
					key: 	fs.readFileSync(h.key),
					cert:	fs.readFileSync(h.cert)}, h.port, h.ip);
			}
		}
	}
	web.init.start();

	// 监视程序退出
	process.on('exit', function () {
		web.init.exit();
	});

	// 如果开启了forever选项
	if (web.get('enable forever')) {
		process.on('uncaughtException', function (err) {
			web.logger.error(err);
		});
	}
}


//-----------------------------------------------------------------------------------
// 检查是否支持cluster
if (Number(process.version.substr(3)) >= 6.0)
	var cluster = require('cluster');
else
	var cluster = false;
// 检查是否开启cluster
if (cmd == '-cluster') {
	var wd = process.argv[3];
	
	if (cluster === false) {
		console.log('ERROR: Your Node version is too lower, not support cluster.');
		process.exit();
	}
	else if (cluster.isMaster) {
		var numCPUs = require('os').cpus().length;
		// 有N个CPU，启动N个子进程
		for (var i = 0; i < numCPUs; i++)
			cluster.fork();
		
		// 监视子进程退出情况
		cluster.on('death', function(worker) {
			console.log('worker ' + worker.pid + ' died');
			// 自动重新fork一个子进程
			cluster.fork();
		});
	}
	else {
		startQuickWeb();
	}
}
else {
	var wd = process.argv[2];
	startQuickWeb();
}